/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Definitions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface V1ChatsGet200Response
 */
export interface V1ChatsGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1ChatsGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1ChatsGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1ChatsGet200ResponseData}
     * @memberof V1ChatsGet200Response
     */
    'data': V1ChatsGet200ResponseData;
}
/**
 * 
 * @export
 * @interface V1ChatsGet200ResponseData
 */
export interface V1ChatsGet200ResponseData {
    /**
     * 
     * @type {Array<V1ChatsPost200ResponseData>}
     * @memberof V1ChatsGet200ResponseData
     */
    'data': Array<V1ChatsPost200ResponseData>;
    /**
     * 
     * @type {number}
     * @memberof V1ChatsGet200ResponseData
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface V1ChatsIdDelete200Response
 */
export interface V1ChatsIdDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof V1ChatsIdDelete200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1ChatsIdDelete200Response
     */
    'message': string | null;
    /**
     * 
     * @type {object}
     * @memberof V1ChatsIdDelete200Response
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface V1ChatsIdGet200Response
 */
export interface V1ChatsIdGet200Response {
    /**
     * 
     * @type {string}
     * @memberof V1ChatsIdGet200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1ChatsIdGet200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1ChatsPost200ResponseData}
     * @memberof V1ChatsIdGet200Response
     */
    'data': V1ChatsPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1ChatsIdMessagePost200Response
 */
export interface V1ChatsIdMessagePost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1ChatsIdMessagePost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1ChatsIdMessagePost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1ChatsPost200ResponseData}
     * @memberof V1ChatsIdMessagePost200Response
     */
    'data': V1ChatsPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1ChatsIdMessagePostRequestBody
 */
export interface V1ChatsIdMessagePostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1ChatsIdMessagePostRequestBody
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface V1ChatsPost200Response
 */
export interface V1ChatsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1ChatsPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1ChatsPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1ChatsPost200ResponseData}
     * @memberof V1ChatsPost200Response
     */
    'data': V1ChatsPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1ChatsPost200ResponseData
 */
export interface V1ChatsPost200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof V1ChatsPost200ResponseData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1ChatsPost200ResponseData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof V1ChatsPost200ResponseData
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof V1ChatsPost200ResponseData
     */
    'status': V1ChatsPost200ResponseDataStatusEnum;
    /**
     * 
     * @type {Array<V1ChatsPost200ResponseDataMessagesInner>}
     * @memberof V1ChatsPost200ResponseData
     */
    'messages': Array<V1ChatsPost200ResponseDataMessagesInner>;
    /**
     * 
     * @type {string}
     * @memberof V1ChatsPost200ResponseData
     */
    '_id': string;
}

export const V1ChatsPost200ResponseDataStatusEnum = {
    Idle: 'idle',
    Running: 'running'
} as const;

export type V1ChatsPost200ResponseDataStatusEnum = typeof V1ChatsPost200ResponseDataStatusEnum[keyof typeof V1ChatsPost200ResponseDataStatusEnum];

/**
 * 
 * @export
 * @interface V1ChatsPost200ResponseDataMessagesInner
 */
export interface V1ChatsPost200ResponseDataMessagesInner {
    /**
     * 
     * @type {string}
     * @memberof V1ChatsPost200ResponseDataMessagesInner
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof V1ChatsPost200ResponseDataMessagesInner
     */
    'role': V1ChatsPost200ResponseDataMessagesInnerRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof V1ChatsPost200ResponseDataMessagesInner
     */
    'content': string;
    /**
     * 
     * @type {any}
     * @memberof V1ChatsPost200ResponseDataMessagesInner
     */
    'result'?: any | null;
}

export const V1ChatsPost200ResponseDataMessagesInnerRoleEnum = {
    User: 'user',
    Assistant: 'assistant',
    System: 'system',
    Function: 'function'
} as const;

export type V1ChatsPost200ResponseDataMessagesInnerRoleEnum = typeof V1ChatsPost200ResponseDataMessagesInnerRoleEnum[keyof typeof V1ChatsPost200ResponseDataMessagesInnerRoleEnum];

/**
 * 
 * @export
 * @interface V1ChatsPostRequestBody
 */
export interface V1ChatsPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1ChatsPostRequestBody
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface V1LoginPost200Response
 */
export interface V1LoginPost200Response {
    /**
     * 
     * @type {string}
     * @memberof V1LoginPost200Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof V1LoginPost200Response
     */
    'message': string | null;
    /**
     * 
     * @type {V1LoginPost200ResponseData}
     * @memberof V1LoginPost200Response
     */
    'data': V1LoginPost200ResponseData;
}
/**
 * 
 * @export
 * @interface V1LoginPost200ResponseData
 */
export interface V1LoginPost200ResponseData {
    /**
     * 
     * @type {string}
     * @memberof V1LoginPost200ResponseData
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof V1LoginPost200ResponseData
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface V1LoginPostRequestBody
 */
export interface V1LoginPostRequestBody {
    /**
     * 
     * @type {string}
     * @memberof V1LoginPostRequestBody
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof V1LoginPostRequestBody
     */
    'password': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Login account
         * @summary Login account
         * @param {V1LoginPostRequestBody} v1LoginPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LoginPost: async (v1LoginPostRequestBody: V1LoginPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1LoginPostRequestBody' is not null or undefined
            assertParamExists('v1LoginPost', 'v1LoginPostRequestBody', v1LoginPostRequestBody)
            const localVarPath = `/v1/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1LoginPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Login account
         * @summary Login account
         * @param {V1LoginPostRequestBody} v1LoginPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LoginPost(v1LoginPostRequestBody: V1LoginPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1LoginPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LoginPost(v1LoginPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Login account
         * @summary Login account
         * @param {AuthApiV1LoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LoginPost(requestParameters: AuthApiV1LoginPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1LoginPost200Response> {
            return localVarFp.v1LoginPost(requestParameters.v1LoginPostRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1LoginPost operation in AuthApi.
 * @export
 * @interface AuthApiV1LoginPostRequest
 */
export interface AuthApiV1LoginPostRequest {
    /**
     * 
     * @type {V1LoginPostRequestBody}
     * @memberof AuthApiV1LoginPost
     */
    readonly v1LoginPostRequestBody: V1LoginPostRequestBody
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Login account
     * @summary Login account
     * @param {AuthApiV1LoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1LoginPost(requestParameters: AuthApiV1LoginPostRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1LoginPost(requestParameters.v1LoginPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get chats
         * @summary Get chats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/chats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete chat
         * @summary Delete chat
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsIdDelete', 'id', id)
            const localVarPath = `/v1/chats/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get chat
         * @summary Get chat
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsIdGet', 'id', id)
            const localVarPath = `/v1/chats/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create chat message
         * @summary Create chat message
         * @param {string} id 
         * @param {V1ChatsIdMessagePostRequestBody} v1ChatsIdMessagePostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsIdMessagePost: async (id: string, v1ChatsIdMessagePostRequestBody: V1ChatsIdMessagePostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsIdMessagePost', 'id', id)
            // verify required parameter 'v1ChatsIdMessagePostRequestBody' is not null or undefined
            assertParamExists('v1ChatsIdMessagePost', 'v1ChatsIdMessagePostRequestBody', v1ChatsIdMessagePostRequestBody)
            const localVarPath = `/v1/chats/{id}/message`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1ChatsIdMessagePostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create chat
         * @summary Create chat
         * @param {V1ChatsPostRequestBody} v1ChatsPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsPost: async (v1ChatsPostRequestBody: V1ChatsPostRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1ChatsPostRequestBody' is not null or undefined
            assertParamExists('v1ChatsPost', 'v1ChatsPostRequestBody', v1ChatsPostRequestBody)
            const localVarPath = `/v1/chats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1ChatsPostRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatApiAxiosParamCreator(configuration)
    return {
        /**
         * Get chats
         * @summary Get chats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ChatsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete chat
         * @summary Delete chat
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ChatsIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get chat
         * @summary Get chat
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ChatsIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create chat message
         * @summary Create chat message
         * @param {string} id 
         * @param {V1ChatsIdMessagePostRequestBody} v1ChatsIdMessagePostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsIdMessagePost(id: string, v1ChatsIdMessagePostRequestBody: V1ChatsIdMessagePostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ChatsIdMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsIdMessagePost(id, v1ChatsIdMessagePostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create chat
         * @summary Create chat
         * @param {V1ChatsPostRequestBody} v1ChatsPostRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsPost(v1ChatsPostRequestBody: V1ChatsPostRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ChatsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsPost(v1ChatsPostRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatApiFp(configuration)
    return {
        /**
         * Get chats
         * @summary Get chats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsGet(options?: AxiosRequestConfig): AxiosPromise<V1ChatsGet200Response> {
            return localVarFp.v1ChatsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete chat
         * @summary Delete chat
         * @param {ChatApiV1ChatsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsIdDelete(requestParameters: ChatApiV1ChatsIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<V1ChatsIdDelete200Response> {
            return localVarFp.v1ChatsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get chat
         * @summary Get chat
         * @param {ChatApiV1ChatsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsIdGet(requestParameters: ChatApiV1ChatsIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<V1ChatsIdGet200Response> {
            return localVarFp.v1ChatsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create chat message
         * @summary Create chat message
         * @param {ChatApiV1ChatsIdMessagePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsIdMessagePost(requestParameters: ChatApiV1ChatsIdMessagePostRequest, options?: AxiosRequestConfig): AxiosPromise<V1ChatsIdMessagePost200Response> {
            return localVarFp.v1ChatsIdMessagePost(requestParameters.id, requestParameters.v1ChatsIdMessagePostRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create chat
         * @summary Create chat
         * @param {ChatApiV1ChatsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsPost(requestParameters: ChatApiV1ChatsPostRequest, options?: AxiosRequestConfig): AxiosPromise<V1ChatsPost200Response> {
            return localVarFp.v1ChatsPost(requestParameters.v1ChatsPostRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1ChatsIdDelete operation in ChatApi.
 * @export
 * @interface ChatApiV1ChatsIdDeleteRequest
 */
export interface ChatApiV1ChatsIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ChatApiV1ChatsIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for v1ChatsIdGet operation in ChatApi.
 * @export
 * @interface ChatApiV1ChatsIdGetRequest
 */
export interface ChatApiV1ChatsIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ChatApiV1ChatsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for v1ChatsIdMessagePost operation in ChatApi.
 * @export
 * @interface ChatApiV1ChatsIdMessagePostRequest
 */
export interface ChatApiV1ChatsIdMessagePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ChatApiV1ChatsIdMessagePost
     */
    readonly id: string

    /**
     * 
     * @type {V1ChatsIdMessagePostRequestBody}
     * @memberof ChatApiV1ChatsIdMessagePost
     */
    readonly v1ChatsIdMessagePostRequestBody: V1ChatsIdMessagePostRequestBody
}

/**
 * Request parameters for v1ChatsPost operation in ChatApi.
 * @export
 * @interface ChatApiV1ChatsPostRequest
 */
export interface ChatApiV1ChatsPostRequest {
    /**
     * 
     * @type {V1ChatsPostRequestBody}
     * @memberof ChatApiV1ChatsPost
     */
    readonly v1ChatsPostRequestBody: V1ChatsPostRequestBody
}

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI {
    /**
     * Get chats
     * @summary Get chats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public v1ChatsGet(options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).v1ChatsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete chat
     * @summary Delete chat
     * @param {ChatApiV1ChatsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public v1ChatsIdDelete(requestParameters: ChatApiV1ChatsIdDeleteRequest, options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).v1ChatsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get chat
     * @summary Get chat
     * @param {ChatApiV1ChatsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public v1ChatsIdGet(requestParameters: ChatApiV1ChatsIdGetRequest, options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).v1ChatsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create chat message
     * @summary Create chat message
     * @param {ChatApiV1ChatsIdMessagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public v1ChatsIdMessagePost(requestParameters: ChatApiV1ChatsIdMessagePostRequest, options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).v1ChatsIdMessagePost(requestParameters.id, requestParameters.v1ChatsIdMessagePostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create chat
     * @summary Create chat
     * @param {ChatApiV1ChatsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public v1ChatsPost(requestParameters: ChatApiV1ChatsPostRequest, options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).v1ChatsPost(requestParameters.v1ChatsPostRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


